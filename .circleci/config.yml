version: 2
jobs:
  clang-format-diff:
    docker:
      - image: debian:stretch
    steps:
      - checkout
      - run:
          name: Verify that source files conform to clang-format
          command: |
            echo "deb http://ftp.us.debian.org/debian unstable main contrib non-free" >> /etc/apt/sources.list.d/unstable.list
            apt-get update -y
            apt-get install -y clang-format-7
            clang-format-7 --version
            CLANG_FORMAT_FILES_LIST=`find ./src/ -name \*.c -type f -or -name \*.cpp -type f -or -name \*.h -type f -or -name \*.hpp -type f`
            CLANG_FORMAT_FAILED=false
            for FILE_TO_VERIFY in $CLANG_FORMAT_FILES_LIST
            do
              export FORMATTING_OUTPUT=`clang-format-7 -output-replacements-xml -style=file $FILE_TO_VERIFY`
              export FORMATTING_ISSUE_COUNT=`echo $FORMATTING_OUTPUT | grep offset | wc -l`
              if [ "$FORMATTING_ISSUE_COUNT" -gt "0" ]; then
                echo "File $FILE_TO_VERIFY does not conform to clang-format."
                echo "Output from clang-format for $FILE_TO_VERIFY:"
                echo "$FORMATTING_OUTPUT"
                CLANG_FORMAT_FAILED=true
              fi
            done
            if [ "$CLANG_FORMAT_FAILED" = true ]; then
              echo "!! There was at least 1 problem with your source files not conforming to clang-format."
              echo "!! Did you use clang-format before pushing to the repository?"
              exit 1
            fi
            exit 0
  build:
    docker:
      - image: tomasiser/docker-cinder:pepr3d
    steps:
      - checkout
      - run:
          name: Update git submodules (except lib/cinder)
          command: git submodule update --init --recursive ":(exclude)lib/cinder"
      - run:
          name: Prepare build (mkdir, cmake)
          command: |
            mkdir build
            cd build
            cmake .. -DPEPR3D_BUILD_CINDER=0 -DPEPR3D_CINDER_PATH="/dockercinder-prebuilt"
      - run:
          name: Run build (make)
          command: |
            cd build
            make
      - persist_to_workspace:
          root: /root/project
          paths:
            - build/*
            - assets/*
      - run:
          name: Compress artifacts
          command: |
            mkdir -p /tmp
            mkdir -p /tmp/artifacts
            tar -cvf /tmp/artifacts/build.tar /root/project/build
            tar -cvf /tmp/artifacts/assets.tar /root/project/assets
      - store_artifacts:
          path: /tmp/artifacts
          destination: build-and-assets
  test:
    docker:
      - image: tomasiser/docker-cinder:pepr3d
    steps:
      - attach_workspace:
          at: /root/project
      - run:
          name: Run tests
          command: |
            cd build
            ./pepr3dtests
workflows:
  version: 2
  clang-format:
    jobs:
      - clang-format-diff
  build-and-test:
    jobs:
      - start:
          type: approval
      - build:
          requires:
            - start
      - test:
          requires:
            - build
